@page "/product/{CategoryName}"
@using WebApp.Models.Products
@using WebApp.Services
@inject BackendApiService BackendApiService

<PageTitle>@CategoryName</PageTitle>

<h1>@CategoryName</h1>

@if (Articles == null)
{
    <MudProgressCircular Indeterminate="true" Class="mt-6" />
}
else if (!Articles.Any())
{
    <MudText>Noch keine Produkte in dieser Kategorie.</MudText>
}
else
{
    <MudGrid Gutter="GutterSize.Small">
        @foreach (var article in Articles)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="mb-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@article.Name</MudText>
                        <MudText>@article.Price.ToString("C")</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Details</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter]
    public string CategoryName { get; set; } = string.Empty;

    private IReadOnlyCollection<Article>? Articles;

    protected override async Task OnInitializedAsync()
    {
        var categories = await BackendApiService.LoadCategoriesAsync();
        var category = categories?.FirstOrDefault(c => c.Name.Equals(CategoryName, StringComparison.OrdinalIgnoreCase));
        Articles = category?.Articles ?? Array.Empty<Article>();
    }
}