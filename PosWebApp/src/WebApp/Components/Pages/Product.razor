@page "/product/{CategoryName}"
@rendermode InteractiveServer
@using WebApp.Models.Products
@using WebApp.Services
@inject BackendApiService BackendApiService
@inject BasketService BasketService

<PageTitle>@CategoryName</PageTitle>

<h1>@CategoryName</h1>

@if (category == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <div class="product-grid">
        @foreach (var article in category.Articles)
        {
            <MudCard Class="product-card">
                <MudCardContent>
                    <MudText Typo="Typo.h6">@article.Name</MudText>
                    <MudText Typo="Typo.subtitle1">@article.Price €</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Class="add-to-basket-button"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               @onclick="() => BasketService.Add(article)">
                        Add to Basket
                    </MudButton>
                </MudCardActions>
            </MudCard>
        }
    </div>
    
    <div class="basket-summary">
        <MudPaper Elevation="4" Class="p-4 d-flex align-center justify-space-between">
            <MudText Typo="Typo.body1">
                Total Items: <strong>@BasketService.TotalCount</strong>
            </MudText>
            <MudText Typo="Typo.body1">
                Total Price: <strong>@BasketService.TotalPrice €</strong>
            </MudText>
        </MudPaper>
    </div>
}

@code {
    [Parameter] public string CategoryName { get; set; } = string.Empty;
    private Category? category;

    protected override async Task OnInitializedAsync()
    {
        var categories = await BackendApiService.LoadCategoriesAsync();
        category = categories?.FirstOrDefault(c => c.Name == CategoryName);
    }
}